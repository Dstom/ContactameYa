@model ContactameYa.Models.conUSUpUsuario
@{
    ViewBag.Title = "Registro de Usuarios";
}
@using (Html.BeginForm("mtdRegistrarUsuario", "conClsSeguridad", FormMethod.Post))
{
    <div class="row">
        <div class="col-md-6">
            <h4>Completa tus Datos</h4>
            <hr />
            @Html.HiddenFor(model => model.USUid_usuario)
            @Html.HiddenFor(model => model.TIUid_tipo_usuario)
            @Html.HiddenFor(model => model.USUestado)

            @Html.HiddenFor(model => model.USUlatitud)
            @Html.HiddenFor(model => model.USUlongitud)



            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group row">
                @Html.LabelFor(model => model.USUusuario, htmlAttributes: new { @class = "col-form-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.USUusuario, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.USUusuario, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.USUclave, htmlAttributes: new { @class = "col-form-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.USUclave, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                    @Html.ValidationMessageFor(model => model.USUclave, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.USUnombre, htmlAttributes: new { @class = "col-form-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.USUnombre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.USUnombre, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.USUapellido, htmlAttributes: new { @class = "col-form-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.USUapellido, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.USUapellido, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.USUtelefono, htmlAttributes: new { @class = "col-form-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.USUtelefono, new { htmlAttributes = new { @class = "form-control", @type="tel" } })
                    @Html.ValidationMessageFor(model => model.USUtelefono, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.USUemail, htmlAttributes: new { @class = "col-form-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.USUemail, new { htmlAttributes = new { @class = "form-control", @type = "email" } })
                    @Html.ValidationMessageFor(model => model.USUemail, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Registrarse" class="btn btn-outline-success" />
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <h4>Selecciona tu Dirección</h4>
            <hr />
            <div class="form-group row">
                @Html.LabelFor(model => model.USUdireccion, htmlAttributes: new { @class = "col-form-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.USUdireccion, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.USUdireccion, "", new { @class = "text-danger" })
                </div>
            </div>
            <div id="map" class="z-depth-1-half map-container-5" style="height: 300px"></div>

        </div>

    </div>
}
@section scripts {
    <script>

        function initMap() {

            var markarray = [];
            //lat y lng de peru
            var myLatlng = { lat: -9.1899672, lng: -75.015152 };
            var geocoder = new google.maps.Geocoder();

            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 5,
                center: myLatlng
            });

            google.maps.event.addListener(map, 'click', function (event) {
                placeMarker(event.latLng);
            });

            function placeMarker(location) {
                // borramos los markers para que solo haya 1
                for (var i = 0; i < markarray.length; i++) {
                    markarray[i].setMap(null);
                }
                markers = [];

                var marker = new google.maps.Marker({
                    position: location,
                    map: map
                });
                //actualizamos el input de direccion
                geocoder.geocode({ 'latLng': location }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            $("#USUdireccion").val(results[0].formatted_address);
                        }
                    }
                });

                google.maps.event.addListener(marker, "click", function (e) {
                    var infowindow = new google.maps.InfoWindow();
                    infowindow.setContent();

                    geocoder.geocode({ 'latLng': location }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                infowindow.setContent(results[0].formatted_address);
                            }
                        }
                    });

                    infowindow.open(map, marker);

                });
                markarray.push(marker);
                var latitude = marker.position.lat();
                var longitude = marker.position.lng();

                $("#USUlatitud").val((latitude.toFixed(9)).replace(".",","));
                $("#USUlongitud").val(longitude.toFixed(9).replace(".", ","));


            }
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC_TlBUf026W9M6XdLBEjjFrsoSy1A-bkk&callback=initMap" async defer>
    </script>
}
